/**
 * –ú–û–î–£–õ–¨: –£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–î–ê–ß–ê–ú–ò (task-manager.js)
 * –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å: —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ UI –∑–∞–¥–∞—á–∞–º–∏, —Å–≤—è–∑—å –¥–∞–Ω–Ω—ã—Ö –∏ DOM
 * –ü–∞—Ç—Ç–µ—Ä–Ω: Controller / Component Manager
 */

import { saveTasksToLocalStorage } from './storage.js'
import { deleteElement, toggleClass } from './dom-manipulation.js'
import { taskList, taskInput } from './dom-elements.js'

// üéØ –ü–ê–¢–¢–ï–†–ù: Optimized Save Scheduling
// –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ DOM
const scheduleSave = () => {
    setTimeout(saveTasksToLocalStorage, 0)
}

// üéØ –ü–ê–¢–¢–ï–†–ù: Pure DOM Factory  
// –ß–∏—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (–±–µ–∑ side effects)
const createTaskElement = ({ text, completed }) => {
    const taskContainer = document.createElement('li')
    const taskText = document.createElement('span')
    const deleteButton = document.createElement('button')
    const checkbox = document.createElement('input')

    // üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    checkbox.type = 'checkbox'
    checkbox.checked = completed

    if (completed) {
        taskText.classList.add('completed')
    }

    deleteButton.textContent = 'Delete'
    taskText.textContent = text

    // üéØ –ü–ê–¢–¢–ï–†–ù: Component Assembly
    // –ß—ë—Ç–∫–∞—è —Å–±–æ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    taskContainer.appendChild(taskText)
    taskContainer.appendChild(checkbox)
    taskContainer.appendChild(deleteButton)

    return { taskContainer, taskText, checkbox, deleteButton }
}

// üéØ –ü–ê–¢–¢–ï–†–ù: Event Binding Layer
// –û—Ç–¥–µ–ª—å–Ω—ã–π —Å–ª–æ–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
const bindTaskEvents = (taskContainer, taskText, checkbox, deleteButton) => {
    deleteButton.addEventListener('click', () => {
        deleteElement(taskContainer)
        scheduleSave()
    })

    checkbox.addEventListener('change', () => {
        toggleClass(taskText, 'completed')
        scheduleSave()
    })
}

// üéØ –ü–ê–¢–¢–ï–†–ù: Data Validation
// –ß–∏—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
const validateTask = (text) => {
    return text.trim() !== ''
}

// üéØ –ü–ê–¢–¢–ï–†–ù: Component Coordinator
// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
export const addTask = ({ text = '', completed = false } = {}) => {
    // üéØ –ü–ê–¢–¢–ï–†–ù: Unified Interface
    // –§—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ —Å –Ω–æ–≤—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏, –∏ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    const inputValue = text || taskInput.value
    
    // üõ°Ô∏è –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!validateTask(inputValue)) return

    // üéØ –ß–ï–¢–ö–û–ï –†–ê–ó–î–ï–õ–ï–ù–ò–ï –û–¢–í–ï–¢–°–¢–í–ï–ù–ù–û–°–¢–ò:
    // 1. –°–æ–∑–¥–∞–Ω–∏–µ DOM —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    const { taskContainer, taskText, checkbox, deleteButton } = createTaskElement({
        text: inputValue, 
        completed
    })
    
    // 2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ UI
    taskList.appendChild(taskContainer)
    
    // 3. –ü—Ä–∏–≤—è–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    bindTaskEvents(taskContainer, taskText, checkbox, deleteButton)

    // 4. –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è –≤–≤–æ–¥–∞
    taskInput.value = ''

    // 5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    scheduleSave()
}

// üí° –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –£–õ–£–ß–®–ï–ù–ò–Ø:
// - –î–æ–±–∞–≤–∏—Ç—å UI feedback –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–ø–æ–¥—Å–≤–µ—Ç–∫–∞ –æ—à–∏–±–æ–∫)
// - –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–º–µ–Ω—É –¥–µ–π—Å—Ç–≤–∏–π (undo/redo)
// - –î–æ–±–∞–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏/—É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á