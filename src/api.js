import { getCurrentTasks } from './storage.js'
import { addTask } from './task-manager.js'

/**
 * –ú–û–î–£–õ–¨: API –ò–ù–¢–ï–ì–†–ê–¶–ò–ò
 * –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å: —Ä–∞–±–æ—Ç–∞ —Å –≤–Ω–µ—à–Ω–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏, –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
 */
export const loadTaskFromAPI = async () => {
    // üéØ –ü–ê–¢–¢–ï–†–ù: Dependency Injection —á–µ—Ä–µ–∑ –∏–º–ø–æ—Ä—Ç—ã
    const currentTasks = getCurrentTasks();

    try {
        // üåê –°–õ–û–ô: –°–µ—Ç–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        const response = await fetch('https://jsonplaceholder.typicode.com/todos?_limit=3')
        
        // üõ°Ô∏è –ü–ê–¢–¢–ï–†–ù: –ó–∞—â–∏—Ç–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ
        if (!response.ok) {
            throw new Error('Failed to fetch')
        }

        // üîÑ –ü–ê–¢–¢–ï–†–ù: Functional Data Pipeline
        // –ï–¥–∏–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π: API ‚Üí –¥–æ–º–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å ‚Üí —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
        const data = await response.json()
        const filteredTasks = data
            .map(({title, completed}) => ({ // üéØ –î–ï–°–¢–†–£–ö–¢–£–†–ò–ó–ê–¶–ò–Ø: –ø—Ä—è–º–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª–µ–π
                text: title,          // –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª—è title -> text
                completed: completed, 
                source: 'api'
            }))
            .filter(apiTask =>  // üéØ –§–ò–õ–¨–¢–†–ê–¶–ò–Ø: —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–∞ —É—Ä–æ–≤–Ω–µ –¥–∞–Ω–Ω—ã—Ö
                !currentTasks.some(existingTask => 
                    existingTask.text === apiTask.text
                )
            );

        // üîÑ –ü–ê–¢–¢–ï–†–ù: Side Effects Management
        // –ß–∏—Å—Ç—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤—ã—à–µ, side effects –æ—Ç–¥–µ–ª—å–Ω–æ
        filteredTasks.forEach(taskValue => {
            addTask(taskValue);
        })

    } catch (error) {
        // üõ°Ô∏è –ü–ê–¢–¢–ï–†–ù: Error Boundary + User Feedback
        console.error('Failed to load tasks from API:', error)
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.')
        // ‚úÖ –î–´–†–ê –ò–°–ü–†–ê–í–õ–ï–ù–ê: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–Ω—è—Ç–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    }
}

// üí° –í–û–ó–ú–û–ñ–ù–´–ï –£–õ–£–ß–®–ï–ù–ò–Ø:
// - Retry –ª–æ–≥–∏–∫–∞ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö
// - –í—ã–Ω–æ—Å URL API –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
// - –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è UX
// - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤